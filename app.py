from flask import Flask, request, jsonify
import requests
import logging
import threading
import time
from yookassa import Configuration, Payment

app = Flask(__name__)

logging.basicConfig(level=logging.DEBUG, format="%(asctime)s - %(levelname)s - %(message)s")

@app.route("/")
def home():
    return "Flask is running!"

# üîπ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ AmoCRM
AMO_DOMAIN = "fitarena.amocrm.ru"  # ‚Üê –ò–∑–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à –¥–æ–º–µ–Ω AmoCRM
AMO_ACCESS_TOKEN = "eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsImp0aSI6IjAwZjU4YTBlMzFkMmRkNTA5ZjI2ZmNlMGFjNTc5YjZlMDM3YjUwMGQ4Nzg4YzcwOWFkYzVhYzM0ZTFjNjFjNTQ4MjI5YzU3MzliMTZkZjMyIn0.eyJhdWQiOiI0NmMzODZhMi1jYzQ2LTQxNDgtOGU2YS0xOThkZmY0YmNkNjYiLCJqdGkiOiIwMGY1OGEwZTMxZDJkZDUwOWYyNmZjZTBhYzU3OWI2ZTAzN2I1MDBkODc4OGM3MDlhZGM1YWMzNGUxYzYxYzU0ODIyOWM1NzM5YjE2ZGYzMiIsImlhdCI6MTczODgzODY2OCwibmJmIjoxNzM4ODM4NjY4LCJleHAiOjE4OTYwNDgwMDAsInN1YiI6IjMzMjg1MTkiLCJncmFudF90eXBlIjoiIiwiYWNjb3VudF9pZCI6MjUxOTkwMjksImJhc2VfZG9tYWluIjoiYW1vY3JtLnJ1IiwidmVyc2lvbiI6Miwic2NvcGVzIjpbImNybSIsImZpbGVzIiwiZmlsZXNfZGVsZXRlIiwibm90aWZpY2F0aW9ucyIsInB1c2hfbm90aWZpY2F0aW9ucyJdLCJoYXNoX3V1aWQiOiIyY2JjZjIwMC0xNmEyLTRiZWQtYjdhNy1iZjc5ZjczM2M5ZjUiLCJhcGlfZG9tYWluIjoiYXBpLWIuYW1vY3JtLnJ1In0.B0elZrHP_aclPIYfOLOuO8VA8XHJQRf7Ras6W2b58Yg1V5TZMalm0EvdqKDx-Ygb8onU8JAbThzCGOaz_JD7eheimbKQHNXtB-IArAFxSNc4KEkgMtpP-HphUCVhsLi2_0STYZItSBHlyIoqjlR8wdls_ZbUiJ9kmUnXk5Qcfx6KUXbKcuGL7oQPB_ywvliR1c1-HWnrHtg-8mlkqIR3g64_ZFhgR0z4IDLP0SABljLsl6jjD5P3Lu9ua3efBC7TrGy7e8XNegbKNscdvViB4oVuDSRO-u0zJf0AsSsrt0d17bwNdEtQhgIoljUnhBzZGj_z9F0iAj2nSOplpBQZ9Q"  # ‚Üê –£–∫–∞–∂–∏—Ç–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω API
PAYMENT_STATUS_FIELD_ID = 704249  # ‚Üê ID –ø–æ–ª—è "–°—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã" –≤ AmoCRM
PAYMENT_ID_FIELD_ID = 571561  # ‚Üê ID –ø–æ–ª—è "ID –ø–ª–∞—Ç–µ–∂–∞" –≤ AmoCRM

YOOKASSA_SHOP_ID = "278210"  # ‚Üê ID –º–∞–≥–∞–∑–∏–Ω–∞
YOOKASSA_SECRET_KEY = "live_fiBWt7qk-rZFAr3utLXCLZ3Uc-nTDBYZjiMBUPV-Qp8"  # ‚Üê –°–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á

# ‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ÆKassa —á–µ—Ä–µ–∑ SDK
Configuration.account_id = YOOKASSA_SHOP_ID
Configuration.secret_key = YOOKASSA_SECRET_KEY

logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")

app = Flask(__name__)

@app.route("/")
def home():
    return "Flask —Å–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç!"

# ‚úÖ –§—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ —Å–¥–µ–ª–∫–∏ –≤ AmoCRM –ø–æ `payment_id`
def find_lead_by_payment_id(payment_id):
    url = f"https://{AMO_DOMAIN}/api/v4/leads"
    headers = {"Authorization": f"Bearer {AMO_ACCESS_TOKEN}"}

    params = {f"filter[custom_fields_values][{PAYMENT_ID_FIELD_ID}]": payment_id}

    response = requests.get(url, headers=headers, params=params)

    if response.status_code == 200 and "_embedded" in response.json():
        leads = response.json()['_embedded']['leads']
        return leads[0] if leads else None
    return None

# ‚úÖ –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Å–¥–µ–ª–∫–∏ –≤ AmoCRM
def update_lead_payment_status(lead_id, new_status):
    url = f"https://{AMO_DOMAIN}/api/v4/leads/{lead_id}"
    headers = {
        "Authorization": f"Bearer {AMO_ACCESS_TOKEN}",
        "Content-Type": "application/json"
    }

    data = {
        "custom_fields_values": [
            {
                "field_id": PAYMENT_STATUS_FIELD_ID,
                "values": [{"value": new_status}]
            }
        ]
    }

    response = requests.patch(url, headers=headers, json=data)

    if response.status_code == 200:
        logging.info(f"‚úÖ –°–¥–µ–ª–∫–∞ {lead_id} –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –¥–æ '{new_status}'")
    else:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–¥–µ–ª–∫–∏ {lead_id}: {response.text}")

# ‚úÖ –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞ –∏–∑ –ÆKassa
def get_payment_status(payment_id):
    try:
        payment = Payment.find_one(payment_id)  # –ó–∞–ø—Ä–æ—Å —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞
        return payment.status
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞ {payment_id}: {e}")
        return None

# ‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–µ–±—Ö—É–∫–æ–≤ –æ—Ç –ÆKassa
@app.route("/payment_status", methods=["POST"])
def payment_status():
    try:
        data = request.json
        logging.info(f"üì© –ü–æ–ª—É—á–µ–Ω –≤–µ–±—Ö—É–∫: {data}")

        payment_id = data.get("object", {}).get("id")
        status = data.get("object", {}).get("status")  # "succeeded" –∏–ª–∏ "canceled"

        if not payment_id or not status:
            return jsonify({"error": "Missing payment_id or status"}), 400

        lead = find_lead_by_payment_id(payment_id)

        if not lead:
            logging.warning(f"‚ö† –õ–∏–¥ —Å payment_id {payment_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ AmoCRM")
            return jsonify({"error": "Lead not found"}), 404

        lead_id = lead["id"]
        new_status = "–û–ø–ª–∞—á–µ–Ω–æ" if status == "succeeded" else "–ù–µ –æ–ø–ª–∞—á–µ–Ω–æ"

        update_lead_payment_status(lead_id, new_status)

        return jsonify({"success": f"Payment status updated in lead {lead_id}"}), 200

    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–µ–±—Ö—É–∫–∞: {e}")
        return jsonify({"error": str(e)}), 500

# ‚úÖ –§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞: –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–æ–≤ –ø–ª–∞—Ç–µ–∂–µ–π –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
def auto_update_payments():
    while True:
        logging.info("üîÑ –ù–∞—á–∞–ª–æ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö —Å–¥–µ–ª–æ–∫...")

        url = f"https://{AMO_DOMAIN}/api/v4/leads"
        headers = {"Authorization": f"Bearer {AMO_ACCESS_TOKEN}"}
        params = {f"filter[custom_fields_values][{PAYMENT_STATUS_FIELD_ID}]": "–ù–µ –æ–ø–ª–∞—á–µ–Ω–æ"}

        response = requests.get(url, headers=headers, params=params)

        if response.status_code == 200 and "_embedded" in response.json():
            leads = response.json()['_embedded']['leads']
            logging.info(f"üîç –ù–∞–π–¥–µ–Ω–æ {len(leads)} –Ω–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö —Å–¥–µ–ª–æ–∫")

            for lead in leads:
                payment_id = None
                for field in lead.get("custom_fields_values", []):
                    if field["field_id"] == PAYMENT_ID_FIELD_ID:
                        payment_id = field["values"][0]["value"]
                        break

                if payment_id:
                    status = get_payment_status(payment_id)
                    if status == "succeeded":
                        update_lead_payment_status(lead["id"], "–û–ø–ª–∞—á–µ–Ω–æ")
                    else:
                        logging.info(f"‚è≥ –ü–ª–∞—Ç—ë–∂ {payment_id} –µ—â—ë –Ω–µ –∑–∞–≤–µ—Ä—à—ë–Ω, —Å—Ç–∞—Ç—É—Å: {status}")

        logging.info("‚è∏ –û–∂–∏–¥–∞–Ω–∏–µ 5 –º–∏–Ω—É—Ç –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π...")
        time.sleep(300)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç

if __name__ == "__main__":
    threading.Thread(target=auto_update_payments, daemon=True).start()
    app.run(host="0.0.0.0", port=5000, debug=True)




import time
from flask import Flask, request, jsonify
import requests
import hmac
import hashlib
import base64
import logging
from yookassa import Configuration, Payment # type: ignore

app = Flask(__name__)

logging.basicConfig(level=logging.DEBUG, format="%(asctime)s - %(levelname)s - %(message)s")

@app.route("/")
def home():
    return "Flask is running!"

# üîπ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ AmoCRM
AMO_DOMAIN = "fitarena.amocrm.ru"  # ‚Üê –ò–∑–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à –¥–æ–º–µ–Ω AmoCRM
AMO_ACCESS_TOKEN = "eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsImp0aSI6IjAwZjU4YTBlMzFkMmRkNTA5ZjI2ZmNlMGFjNTc5YjZlMDM3YjUwMGQ4Nzg4YzcwOWFkYzVhYzM0ZTFjNjFjNTQ4MjI5YzU3MzliMTZkZjMyIn0.eyJhdWQiOiI0NmMzODZhMi1jYzQ2LTQxNDgtOGU2YS0xOThkZmY0YmNkNjYiLCJqdGkiOiIwMGY1OGEwZTMxZDJkZDUwOWYyNmZjZTBhYzU3OWI2ZTAzN2I1MDBkODc4OGM3MDlhZGM1YWMzNGUxYzYxYzU0ODIyOWM1NzM5YjE2ZGYzMiIsImlhdCI6MTczODgzODY2OCwibmJmIjoxNzM4ODM4NjY4LCJleHAiOjE4OTYwNDgwMDAsInN1YiI6IjMzMjg1MTkiLCJncmFudF90eXBlIjoiIiwiYWNjb3VudF9pZCI6MjUxOTkwMjksImJhc2VfZG9tYWluIjoiYW1vY3JtLnJ1IiwidmVyc2lvbiI6Miwic2NvcGVzIjpbImNybSIsImZpbGVzIiwiZmlsZXNfZGVsZXRlIiwibm90aWZpY2F0aW9ucyIsInB1c2hfbm90aWZpY2F0aW9ucyJdLCJoYXNoX3V1aWQiOiIyY2JjZjIwMC0xNmEyLTRiZWQtYjdhNy1iZjc5ZjczM2M5ZjUiLCJhcGlfZG9tYWluIjoiYXBpLWIuYW1vY3JtLnJ1In0.B0elZrHP_aclPIYfOLOuO8VA8XHJQRf7Ras6W2b58Yg1V5TZMalm0EvdqKDx-Ygb8onU8JAbThzCGOaz_JD7eheimbKQHNXtB-IArAFxSNc4KEkgMtpP-HphUCVhsLi2_0STYZItSBHlyIoqjlR8wdls_ZbUiJ9kmUnXk5Qcfx6KUXbKcuGL7oQPB_ywvliR1c1-HWnrHtg-8mlkqIR3g64_ZFhgR0z4IDLP0SABljLsl6jjD5P3Lu9ua3efBC7TrGy7e8XNegbKNscdvViB4oVuDSRO-u0zJf0AsSsrt0d17bwNdEtQhgIoljUnhBzZGj_z9F0iAj2nSOplpBQZ9Q"  # ‚Üê –£–∫–∞–∂–∏—Ç–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω API
PAYMENT_STATUS_FIELD_ID = 704249  # ‚Üê ID –ø–æ–ª—è "–°—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã" –≤ AmoCRM
PAYMENT_ID_FIELD_ID = 571561  # ‚Üê ID –ø–æ–ª—è "ID –ø–ª–∞—Ç–µ–∂–∞" –≤ AmoCRM

YOOKASSA_SHOP_ID = "278210"  # ‚Üê ID –º–∞–≥–∞–∑–∏–Ω–∞
YOOKASSA_SECRET_KEY = "live_fiBWt7qk-rZFAr3utLXCLZ3Uc-nTDBYZjiMBUPV-Qp8"  # ‚Üê –°–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á

# ‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ÆKassa —á–µ—Ä–µ–∑ SDK
Configuration.account_id = YOOKASSA_SHOP_ID
Configuration.secret_key = YOOKASSA_SECRET_KEY

# ‚úÖ –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ª–∏–Ω–Ω–æ—Å—Ç–∏ –≤–µ–±—Ö—É–∫–æ–≤ –ÆKassa
def verify_yookassa_signature(request):
    signature = request.headers.get("X-Content-HMAC")
    if not signature:
        return False

    body = request.data
    hmac_obj = hmac.new(YOOKASSA_SECRET_KEY.encode(), body, hashlib.sha256)
    expected_signature = base64.b64encode(hmac_obj.digest()).decode()

    return hmac.compare_digest(signature, expected_signature)

# ‚úÖ –§—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ –ª–∏–¥–∞ –ø–æ `order_id` –≤ AmoCRM
def find_lead_by_order_id(order_id):
    url = f"https://{AMO_DOMAIN}/api/v4/leads"
    headers = {"Authorization": f"Bearer {AMO_ACCESS_TOKEN}"}
    
    params = {"query": order_id}  # –ü–æ–∏—Å–∫ –ø–æ order_id
    logging.debug(f"üîç –ü–æ–∏—Å–∫ –ª–∏–¥–∞ –≤ AmoCRM –ø–æ order_id: {order_id}")
    response = requests.get(url, headers=headers, params=params)

    if response.status_code == 200 and response.json().get('_embedded'):
        leads = response.json()['_embedded']['leads']
        if leads:
            logging.debug(f"‚úÖ –õ–∏–¥ –Ω–∞–π–¥–µ–Ω: {leads[0]['id']}")
            return leads[0]  
    logging.warning(f"‚ö† –õ–∏–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ order_id: {order_id}")
    return None

# ‚úÖ –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—è "–°—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã" –≤ AmoCRM
def update_lead_payment_status(lead_id, payment_status):
    url = f"https://{AMO_DOMAIN}/api/v4/leads/{lead_id}"
    headers = {
        "Authorization": f"Bearer {AMO_ACCESS_TOKEN}",
        "Content-Type": "application/json"
    }

    new_status = "–û–ø–ª–∞—á–µ–Ω–æ" if payment_status == "succeeded" else "–ù–µ –æ–ø–ª–∞—á–µ–Ω–æ"

    data = {
        "custom_fields_values": [
            {
                "field_id": PAYMENT_STATUS_FIELD_ID,
                "values": [{"value": new_status}]
            }
        ]
    }

    logging.debug(f"üîÑ –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ª–∏–¥–∞ {lead_id} –Ω–∞: {new_status}")
    response = requests.patch(url, headers=headers, json=data)

    if response.status_code == 200:
        logging.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–¥–µ–ª–∫–∏ {lead_id} –Ω–∞ '{new_status}'")
        return True
    else:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ª–∏–¥–∞ {lead_id}. –ö–æ–¥: {response.status_code}, –û—Ç–≤–µ—Ç: {response.text}")
        return False

# ‚úÖ –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞ —á–µ—Ä–µ–∑ API –ÆKassa
def get_payment_status(payment_id):
    try:
        payment = Payment.find(payment_id)  # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞
        return payment.status  # "succeeded" –∏–ª–∏ "canceled"
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞: {e}")
        return str(e)

# ‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–µ–±—Ö—É–∫–æ–≤ –æ—Ç –ÆKassa
@app.route("/payment_status", methods=["POST"])
def payment_status():
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ª–∏–Ω–Ω–æ—Å—Ç–∏ –≤–µ–±—Ö—É–∫–∞
        #if not verify_yookassa_signature(request):
         #   return jsonify({"error": "Invalid signature"}), 403

        data = request.json
        logging.debug(f"üì© –ü–æ–ª—É—á–µ–Ω –≤–µ–±—Ö—É–∫: {data}")
        order_id = data.get("object", {}).get("metadata", {}).get("order_id") or data.get("object", {}).get("metadata", {}).get("order_id")
        status = data.get("object", {}).get("status")  # "succeeded" –∏–ª–∏ "canceled"
        logging.debug(f"üìå –ò–∑–≤–ª–µ—á—ë–Ω order_id: {order_id}, —Å—Ç–∞—Ç—É—Å: {status}")

        if not order_id or not status:
            logging.warning("‚ö† –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç order_id –∏–ª–∏ —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ –≤ –≤–µ–±—Ö—É–∫–µ")
            return jsonify({"error": "Missing order_id or status"}), 400

        lead = find_lead_by_order_id(order_id)

        if not lead:
            logging.warning(f"‚ö† –õ–∏–¥ —Å order_id {order_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ AmoCRM")
            return jsonify({"error": "Lead not found"}), 404

        lead_id = lead["id"]

        if update_lead_payment_status(lead_id, status):
            return jsonify({"success": f"Payment status updated in lead {lead_id}"}), 200
        else:
            return jsonify({"error": "Failed to update payment status"}), 500

    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–µ–±—Ö—É–∫–∞: {e}")
        return jsonify({"error": str(e)}), 500

# ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞ –ø–æ `payment_id`
@app.route("/check_payment/<payment_id>", methods=["GET"])
def check_payment(payment_id):
    try:
        status = get_payment_status(payment_id)
        logging.debug(f"üîé –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞ {payment_id}: {status}")
        return jsonify({"payment_id": payment_id, "status": status}), 200
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–ª–∞—Ç–µ–∂–∞ {payment_id}: {e}")
        return jsonify({"error": str(e)}), 500
    
# ‚úÖ –§—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ —Å–¥–µ–ª–æ–∫ –≤ AmoCRM, –≥–¥–µ —Å—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã = "–ù–µ –æ–ø–ª–∞—á–µ–Ω–æ"
def get_unpaid_leads():
    url = f"https://{AMO_DOMAIN}/api/v4/leads"
    headers = {"Authorization": f"Bearer {AMO_ACCESS_TOKEN}"}

    params = {
        f"filter[custom_fields_values][{PAYMENT_STATUS_FIELD_ID}]": "–ù–µ –æ–ø–ª–∞—á–µ–Ω–æ"
    }

    response = requests.get(url, headers=headers, params=params)

    if response.status_code == 200 and "_embedded" in response.json():
        leads = response.json()['_embedded']['leads']
        logging.info(f"üîç –ù–∞–π–¥–µ–Ω–æ {len(leads)} –Ω–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö —Å–¥–µ–ª–æ–∫")
        return leads
    else:
        logging.warning("‚ö† –ù–µ –Ω–∞–π–¥–µ–Ω—ã —Å–¥–µ–ª–∫–∏ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º '–ù–µ –æ–ø–ª–∞—á–µ–Ω–æ'")
        return []

# ‚úÖ –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è `payment_id` –∏–∑ —Å–¥–µ–ª–∫–∏
def get_payment_id_from_lead(lead):
    for field in lead.get("custom_fields_values", []):
        if field["field_id"] == PAYMENT_ID_FIELD_ID:
            return field["values"][0]["value"]
    return None

# ‚úÖ –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Å–¥–µ–ª–∫–∏
def update_lead_payment_status(lead_id, new_status):
    url = f"https://{AMO_DOMAIN}/api/v4/leads/{lead_id}"
    headers = {
        "Authorization": f"Bearer {AMO_ACCESS_TOKEN}",
        "Content-Type": "application/json"
    }

    data = {
        "custom_fields_values": [
            {
                "field_id": PAYMENT_STATUS_FIELD_ID,
                "values": [{"value": new_status}]
            }
        ]
    }

    response = requests.patch(url, headers=headers, json=data)

    if response.status_code == 200:
        logging.info(f"‚úÖ –°–¥–µ–ª–∫–∞ {lead_id} –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –¥–æ '{new_status}'")
    else:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–¥–µ–ª–∫–∏ {lead_id}: {response.text}")

# ‚úÖ –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –∞–≤—Ç–æ-–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–¥–µ–ª–æ–∫
def auto_update_payments():
    while True:
        logging.info("üîÑ –ù–∞—á–∞–ª–æ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö —Å–¥–µ–ª–æ–∫...")

        leads = get_unpaid_leads()

        for lead in leads:
            payment_id = get_payment_id_from_lead(lead)
            if payment_id:
                status = get_payment_status(payment_id)

                if status == "succeeded":
                    update_lead_payment_status(lead["id"], "–û–ø–ª–∞—á–µ–Ω–æ")
                else:
                    logging.info(f"‚è≥ –ü–ª–∞—Ç—ë–∂ {payment_id} –µ—â—ë –Ω–µ –∑–∞–≤–µ—Ä—à—ë–Ω, —Å—Ç–∞—Ç—É—Å: {status}")

        logging.info("‚è∏ –û–∂–∏–¥–∞–Ω–∏–µ 10 –º–∏–Ω—É—Ç –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π...")
        time.sleep(600)  # –ñ–¥—ë–º 10 –º–∏–Ω—É—Ç –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π

if __name__ == "__main__":
    app.run(host="0.0.0.0", port=5000, debug=True)


